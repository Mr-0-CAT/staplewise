// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  phone       String
  role        Role     @default(BUYER)
  companyName String?
  gst         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  buyQueries  Query[] @relation("BuyerQueries")
  sellQueries Query[] @relation("SellerQueries")
  assignedQueries Query[] @relation("AssignedQueries")
  products    Product[]
  orders      Order[]
  companyDetails CompanyDetails?

  @@map("users")
}

model CompanyDetails {
  id              String @id @default(cuid())
  userId          String @unique
  name            String
  location        String
  street1         String
  street2         String?
  pincode         String
  state           String
  registrarName   String
  gstin           String
  yearEstablished Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("company_details")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  grade         String
  pricePerKg    Float
  location      String
  stock         Int
  image         String
  specifications String
  deliveryTime  String
  minimumOrderQuantity Int @default(1)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  queries  Query[]
  orderItems OrderItem[]

  @@map("products")
}

model Query {
  id          String      @id @default(cuid())
  type        QueryType
  quantity    Int
  companyName String
  pincode     String
  email       String
  phone       String
  gst         String?
  status      QueryStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  buyerId     String?
  buyer       User?   @relation("BuyerQueries", fields: [buyerId], references: [id])
  
  sellerId    String?
  seller      User?   @relation("SellerQueries", fields: [sellerId], references: [id])
  
  assignedToId String?
  assignedTo   User?   @relation("AssignedQueries", fields: [assignedToId], references: [id])

  @@map("queries")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  totalAmount Float
  status      OrderStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  buyerId String
  buyer   User   @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  items   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  pricePerKg Float
  totalPrice Float

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum Role {
  ADMIN
  SALES
  BUYER
  SELLER
}

enum QueryType {
  BUY
  SELL
}

enum QueryStatus {
  PENDING
  ASSIGNED
  COMPLETED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}